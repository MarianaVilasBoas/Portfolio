{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Detecção de Fraude em Cartões de Crédito.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/MarianaVilasBoas/Portfolio/blob/main/Detec%C3%A7%C3%A3o_de_Fraude_em_Cart%C3%B5es_de_Cr%C3%A9dito\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IlvCHzRKFion"
      },
      "source": [
        "#Detecção de Fraudes no Cartão de Crédito\n",
        "Com a **popularização** dos **pagamentos** através de **meios digitais**, o **cartão de crédito** assumiu o papel de **queridinho** na vida da população como um todo. Esse **aumento da demanda**, gerado sobretudo pelos ecommerces, tornou a tarefa de **validar se uma transação é legítima ou não** cada vez **mais difícil**. Muitas pessoas **utilizam** o **cartão de crédito** mas **desconhecem** os **riscos** associados à ele. E **você**, **conhece** os **riscos** de se usar o **cartão de crédito?**\n",
        "\n",
        "<center><img alt=\"Fraude Cartão Crédito\" width=\"55%\" src=\"https://blog.konduto.com/wp-content/uploads/2018/06/201591-como-uma-fraude-de-cartao-de-credito-prejudica-o-seu-negocio.jpg\"></center>\n",
        "\n",
        "Somente no **primeiro semestre** de **2021** o **Brasil** registrou uma **alta** de quase **33%** nas **tentativas de fraude de cartão de crédito**. O **aumento** na **frequência** de **compras pela internet** e do **ticket médio** gasto têm chamado a **atenção** de **criminosos**. A **recorrência** de **fraudes**, por sua vez, ocasionam na **perda de confiança** e **altos custos** que sobrecaem sob a instituição financeira e o consumidor final. O uso dessa **tecnologia**, portanto, exige mecanismos que reflitam **segurança** e **manutenção adequada** da solução financeira. Tendo em vista a **crescente importância** acerca desse **tema**, desenvolvi um **modelo de Machine\n",
        "Learning** capaz de **detectar fraudes nas transações realizadas com cartão de crédito**. \n",
        "\n",
        "fonte: [InfoMoney](https://www.infomoney.com.br/minhas-financas/brasil-teve-alta-de-quase-33-nas-tentativas-de-fraude-com-cartao-de-credito-no-1-semestre-mostra-estudo/)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0HVmpIxQWT4Y"
      },
      "source": [
        "## Importando os Dados\n",
        "\n",
        "Os dados utilizados no projeto foram disponibilizados por empresas européias de cartão de crédito. O *dataset* representa as operações financeiras que aconteceram no período de dois dias, onde foram classificadas 492 fraudes em meio a quase 290 mil transações.\n",
        "Devido a premissas relacionadas a privacidade dos dados e segurança da informação, as variáveis se tornaram anônimas.\n",
        "\n",
        "[Na página original dos dados](https://www.kaggle.com/mlg-ulb/creditcardfraud), também é informado que as variáveis passaram por uma transformação conhecida como Análise de Componentes Principais (*Principal Component Analysis* - PCA)."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FiHRsqWTUaeb"
      },
      "source": [
        "## Obtenção dos Dados"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oQ4bNy7udtEE",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1590f8f5-b6e7-4b4e-c221-ed62f06f6bd1"
      },
      "source": [
        "# importar os pacotes necessários\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "!pip install scikit-plot;\n",
        "import scikitplot as skplt"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting scikit-plot\n",
            "  Downloading scikit_plot-0.3.7-py3-none-any.whl (33 kB)\n",
            "Requirement already satisfied: scipy>=0.9 in /usr/local/lib/python3.7/dist-packages (from scikit-plot) (1.4.1)\n",
            "Requirement already satisfied: scikit-learn>=0.18 in /usr/local/lib/python3.7/dist-packages (from scikit-plot) (0.22.2.post1)\n",
            "Requirement already satisfied: matplotlib>=1.4.0 in /usr/local/lib/python3.7/dist-packages (from scikit-plot) (3.2.2)\n",
            "Requirement already satisfied: joblib>=0.10 in /usr/local/lib/python3.7/dist-packages (from scikit-plot) (1.0.1)\n",
            "Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=1.4.0->scikit-plot) (2.8.2)\n",
            "Requirement already satisfied: numpy>=1.11 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=1.4.0->scikit-plot) (1.19.5)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=1.4.0->scikit-plot) (0.10.0)\n",
            "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=1.4.0->scikit-plot) (2.4.7)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib>=1.4.0->scikit-plot) (1.3.1)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from cycler>=0.10->matplotlib>=1.4.0->scikit-plot) (1.15.0)\n",
            "Installing collected packages: scikit-plot\n",
            "Successfully installed scikit-plot-0.3.7\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "g5XDTWW5LRVe"
      },
      "source": [
        "Para facilitar a aquisição dos dados, criei um *link* com acesso direto ao `csv`. Com isso, basta importar o conjunto de dados usando o método `pd.read_csv()`."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4NxUOfDOj2j8"
      },
      "source": [
        "# importar os dados para um dataframe\n",
        "df=pd.read_csv('https://www.dropbox.com/s/b44o3t3ehmnx2b7/creditcard.csv?dl=1')"
      ],
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7nF_Dhd81Cvq"
      },
      "source": [
        "Com os dados importados para dentro de uma estrutura *Dataframe* - e não havendo a necessidade de mais nenhum ajuste ou configuração nesta etapa, pode-se iniciar uma análise exploratória dos dados a fim de preparar um modelo de *Machine Learning*."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8UtXyZ6stlSM"
      },
      "source": [
        "## Análise Exploratória\n",
        "\n",
        "Inicialmente, verifiquei as primeiras entradas do dataframe:\n",
        "* Como os dados passaram por um processo de PCA, as variáveis se tornaram anônimas.\n",
        "* As colunas time e amount foram preservadas e mantidas como originais.\n",
        "* A variável alvo corresponde a coluna 'Class' que classifica a transação em:\n",
        "  * 0: transação normal\n",
        "  * 1: transação fraudulenta"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IqM59tnkUghn"
      },
      "source": [
        "## Análise dos Dados"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 224
        },
        "id": "GIeso0Xz3eGd",
        "outputId": "0da64608-53c3-4e6a-8917-271f7410b1ad"
      },
      "source": [
        "#mostrar as cinco primeiras entradas\n",
        "df.head()"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Time</th>\n",
              "      <th>V1</th>\n",
              "      <th>V2</th>\n",
              "      <th>V3</th>\n",
              "      <th>V4</th>\n",
              "      <th>V5</th>\n",
              "      <th>V6</th>\n",
              "      <th>V7</th>\n",
              "      <th>V8</th>\n",
              "      <th>V9</th>\n",
              "      <th>V10</th>\n",
              "      <th>V11</th>\n",
              "      <th>V12</th>\n",
              "      <th>V13</th>\n",
              "      <th>V14</th>\n",
              "      <th>V15</th>\n",
              "      <th>V16</th>\n",
              "      <th>V17</th>\n",
              "      <th>V18</th>\n",
              "      <th>V19</th>\n",
              "      <th>V20</th>\n",
              "      <th>V21</th>\n",
              "      <th>V22</th>\n",
              "      <th>V23</th>\n",
              "      <th>V24</th>\n",
              "      <th>V25</th>\n",
              "      <th>V26</th>\n",
              "      <th>V27</th>\n",
              "      <th>V28</th>\n",
              "      <th>Amount</th>\n",
              "      <th>Class</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.0</td>\n",
              "      <td>-1.359807</td>\n",
              "      <td>-0.072781</td>\n",
              "      <td>2.536347</td>\n",
              "      <td>1.378155</td>\n",
              "      <td>-0.338321</td>\n",
              "      <td>0.462388</td>\n",
              "      <td>0.239599</td>\n",
              "      <td>0.098698</td>\n",
              "      <td>0.363787</td>\n",
              "      <td>0.090794</td>\n",
              "      <td>-0.551600</td>\n",
              "      <td>-0.617801</td>\n",
              "      <td>-0.991390</td>\n",
              "      <td>-0.311169</td>\n",
              "      <td>1.468177</td>\n",
              "      <td>-0.470401</td>\n",
              "      <td>0.207971</td>\n",
              "      <td>0.025791</td>\n",
              "      <td>0.403993</td>\n",
              "      <td>0.251412</td>\n",
              "      <td>-0.018307</td>\n",
              "      <td>0.277838</td>\n",
              "      <td>-0.110474</td>\n",
              "      <td>0.066928</td>\n",
              "      <td>0.128539</td>\n",
              "      <td>-0.189115</td>\n",
              "      <td>0.133558</td>\n",
              "      <td>-0.021053</td>\n",
              "      <td>149.62</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.0</td>\n",
              "      <td>1.191857</td>\n",
              "      <td>0.266151</td>\n",
              "      <td>0.166480</td>\n",
              "      <td>0.448154</td>\n",
              "      <td>0.060018</td>\n",
              "      <td>-0.082361</td>\n",
              "      <td>-0.078803</td>\n",
              "      <td>0.085102</td>\n",
              "      <td>-0.255425</td>\n",
              "      <td>-0.166974</td>\n",
              "      <td>1.612727</td>\n",
              "      <td>1.065235</td>\n",
              "      <td>0.489095</td>\n",
              "      <td>-0.143772</td>\n",
              "      <td>0.635558</td>\n",
              "      <td>0.463917</td>\n",
              "      <td>-0.114805</td>\n",
              "      <td>-0.183361</td>\n",
              "      <td>-0.145783</td>\n",
              "      <td>-0.069083</td>\n",
              "      <td>-0.225775</td>\n",
              "      <td>-0.638672</td>\n",
              "      <td>0.101288</td>\n",
              "      <td>-0.339846</td>\n",
              "      <td>0.167170</td>\n",
              "      <td>0.125895</td>\n",
              "      <td>-0.008983</td>\n",
              "      <td>0.014724</td>\n",
              "      <td>2.69</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1.0</td>\n",
              "      <td>-1.358354</td>\n",
              "      <td>-1.340163</td>\n",
              "      <td>1.773209</td>\n",
              "      <td>0.379780</td>\n",
              "      <td>-0.503198</td>\n",
              "      <td>1.800499</td>\n",
              "      <td>0.791461</td>\n",
              "      <td>0.247676</td>\n",
              "      <td>-1.514654</td>\n",
              "      <td>0.207643</td>\n",
              "      <td>0.624501</td>\n",
              "      <td>0.066084</td>\n",
              "      <td>0.717293</td>\n",
              "      <td>-0.165946</td>\n",
              "      <td>2.345865</td>\n",
              "      <td>-2.890083</td>\n",
              "      <td>1.109969</td>\n",
              "      <td>-0.121359</td>\n",
              "      <td>-2.261857</td>\n",
              "      <td>0.524980</td>\n",
              "      <td>0.247998</td>\n",
              "      <td>0.771679</td>\n",
              "      <td>0.909412</td>\n",
              "      <td>-0.689281</td>\n",
              "      <td>-0.327642</td>\n",
              "      <td>-0.139097</td>\n",
              "      <td>-0.055353</td>\n",
              "      <td>-0.059752</td>\n",
              "      <td>378.66</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1.0</td>\n",
              "      <td>-0.966272</td>\n",
              "      <td>-0.185226</td>\n",
              "      <td>1.792993</td>\n",
              "      <td>-0.863291</td>\n",
              "      <td>-0.010309</td>\n",
              "      <td>1.247203</td>\n",
              "      <td>0.237609</td>\n",
              "      <td>0.377436</td>\n",
              "      <td>-1.387024</td>\n",
              "      <td>-0.054952</td>\n",
              "      <td>-0.226487</td>\n",
              "      <td>0.178228</td>\n",
              "      <td>0.507757</td>\n",
              "      <td>-0.287924</td>\n",
              "      <td>-0.631418</td>\n",
              "      <td>-1.059647</td>\n",
              "      <td>-0.684093</td>\n",
              "      <td>1.965775</td>\n",
              "      <td>-1.232622</td>\n",
              "      <td>-0.208038</td>\n",
              "      <td>-0.108300</td>\n",
              "      <td>0.005274</td>\n",
              "      <td>-0.190321</td>\n",
              "      <td>-1.175575</td>\n",
              "      <td>0.647376</td>\n",
              "      <td>-0.221929</td>\n",
              "      <td>0.062723</td>\n",
              "      <td>0.061458</td>\n",
              "      <td>123.50</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2.0</td>\n",
              "      <td>-1.158233</td>\n",
              "      <td>0.877737</td>\n",
              "      <td>1.548718</td>\n",
              "      <td>0.403034</td>\n",
              "      <td>-0.407193</td>\n",
              "      <td>0.095921</td>\n",
              "      <td>0.592941</td>\n",
              "      <td>-0.270533</td>\n",
              "      <td>0.817739</td>\n",
              "      <td>0.753074</td>\n",
              "      <td>-0.822843</td>\n",
              "      <td>0.538196</td>\n",
              "      <td>1.345852</td>\n",
              "      <td>-1.119670</td>\n",
              "      <td>0.175121</td>\n",
              "      <td>-0.451449</td>\n",
              "      <td>-0.237033</td>\n",
              "      <td>-0.038195</td>\n",
              "      <td>0.803487</td>\n",
              "      <td>0.408542</td>\n",
              "      <td>-0.009431</td>\n",
              "      <td>0.798278</td>\n",
              "      <td>-0.137458</td>\n",
              "      <td>0.141267</td>\n",
              "      <td>-0.206010</td>\n",
              "      <td>0.502292</td>\n",
              "      <td>0.219422</td>\n",
              "      <td>0.215153</td>\n",
              "      <td>69.99</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Time        V1        V2        V3  ...       V27       V28  Amount  Class\n",
              "0   0.0 -1.359807 -0.072781  2.536347  ...  0.133558 -0.021053  149.62      0\n",
              "1   0.0  1.191857  0.266151  0.166480  ... -0.008983  0.014724    2.69      0\n",
              "2   1.0 -1.358354 -1.340163  1.773209  ... -0.055353 -0.059752  378.66      0\n",
              "3   1.0 -0.966272 -0.185226  1.792993  ...  0.062723  0.061458  123.50      0\n",
              "4   2.0 -1.158233  0.877737  1.548718  ...  0.219422  0.215153   69.99      0\n",
              "\n",
              "[5 rows x 31 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6PKXgrAc6KEj"
      },
      "source": [
        "Em seguida, visualizei a **distribuição estatística** das variáveis e conclui que:\n",
        "* As variáveis que foram transformadas pelo PCA não apresentam nenhuma discrepância, assim como a variável `Time`\n",
        "* A variável `Amount` possui 75% do seu valor abaixo de 77, porém o seu valor máximo é de 25691, indicando uma alta dispersão dos dados. A média dessa feature, no entanto, é em torno de 88, mostrando que a maioria das transações possuem um valor mais baixo, como esperado. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 317
        },
        "id": "hrAFpUfZ4_xv",
        "outputId": "466944d0-6516-4c9c-e070-6d36407da4bc"
      },
      "source": [
        "#visualizar resumo estatístico\n",
        "df.describe()"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Time</th>\n",
              "      <th>V1</th>\n",
              "      <th>V2</th>\n",
              "      <th>V3</th>\n",
              "      <th>V4</th>\n",
              "      <th>V5</th>\n",
              "      <th>V6</th>\n",
              "      <th>V7</th>\n",
              "      <th>V8</th>\n",
              "      <th>V9</th>\n",
              "      <th>V10</th>\n",
              "      <th>V11</th>\n",
              "      <th>V12</th>\n",
              "      <th>V13</th>\n",
              "      <th>V14</th>\n",
              "      <th>V15</th>\n",
              "      <th>V16</th>\n",
              "      <th>V17</th>\n",
              "      <th>V18</th>\n",
              "      <th>V19</th>\n",
              "      <th>V20</th>\n",
              "      <th>V21</th>\n",
              "      <th>V22</th>\n",
              "      <th>V23</th>\n",
              "      <th>V24</th>\n",
              "      <th>V25</th>\n",
              "      <th>V26</th>\n",
              "      <th>V27</th>\n",
              "      <th>V28</th>\n",
              "      <th>Amount</th>\n",
              "      <th>Class</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>284807.000000</td>\n",
              "      <td>2.848070e+05</td>\n",
              "      <td>2.848070e+05</td>\n",
              "      <td>2.848070e+05</td>\n",
              "      <td>2.848070e+05</td>\n",
              "      <td>2.848070e+05</td>\n",
              "      <td>2.848070e+05</td>\n",
              "      <td>2.848070e+05</td>\n",
              "      <td>2.848070e+05</td>\n",
              "      <td>2.848070e+05</td>\n",
              "      <td>2.848070e+05</td>\n",
              "      <td>2.848070e+05</td>\n",
              "      <td>2.848070e+05</td>\n",
              "      <td>2.848070e+05</td>\n",
              "      <td>2.848070e+05</td>\n",
              "      <td>2.848070e+05</td>\n",
              "      <td>2.848070e+05</td>\n",
              "      <td>2.848070e+05</td>\n",
              "      <td>2.848070e+05</td>\n",
              "      <td>2.848070e+05</td>\n",
              "      <td>2.848070e+05</td>\n",
              "      <td>2.848070e+05</td>\n",
              "      <td>2.848070e+05</td>\n",
              "      <td>2.848070e+05</td>\n",
              "      <td>2.848070e+05</td>\n",
              "      <td>2.848070e+05</td>\n",
              "      <td>2.848070e+05</td>\n",
              "      <td>2.848070e+05</td>\n",
              "      <td>2.848070e+05</td>\n",
              "      <td>284807.000000</td>\n",
              "      <td>284807.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>94813.859575</td>\n",
              "      <td>3.919560e-15</td>\n",
              "      <td>5.688174e-16</td>\n",
              "      <td>-8.769071e-15</td>\n",
              "      <td>2.782312e-15</td>\n",
              "      <td>-1.552563e-15</td>\n",
              "      <td>2.010663e-15</td>\n",
              "      <td>-1.694249e-15</td>\n",
              "      <td>-1.927028e-16</td>\n",
              "      <td>-3.137024e-15</td>\n",
              "      <td>1.768627e-15</td>\n",
              "      <td>9.170318e-16</td>\n",
              "      <td>-1.810658e-15</td>\n",
              "      <td>1.693438e-15</td>\n",
              "      <td>1.479045e-15</td>\n",
              "      <td>3.482336e-15</td>\n",
              "      <td>1.392007e-15</td>\n",
              "      <td>-7.528491e-16</td>\n",
              "      <td>4.328772e-16</td>\n",
              "      <td>9.049732e-16</td>\n",
              "      <td>5.085503e-16</td>\n",
              "      <td>1.537294e-16</td>\n",
              "      <td>7.959909e-16</td>\n",
              "      <td>5.367590e-16</td>\n",
              "      <td>4.458112e-15</td>\n",
              "      <td>1.453003e-15</td>\n",
              "      <td>1.699104e-15</td>\n",
              "      <td>-3.660161e-16</td>\n",
              "      <td>-1.206049e-16</td>\n",
              "      <td>88.349619</td>\n",
              "      <td>0.001727</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>47488.145955</td>\n",
              "      <td>1.958696e+00</td>\n",
              "      <td>1.651309e+00</td>\n",
              "      <td>1.516255e+00</td>\n",
              "      <td>1.415869e+00</td>\n",
              "      <td>1.380247e+00</td>\n",
              "      <td>1.332271e+00</td>\n",
              "      <td>1.237094e+00</td>\n",
              "      <td>1.194353e+00</td>\n",
              "      <td>1.098632e+00</td>\n",
              "      <td>1.088850e+00</td>\n",
              "      <td>1.020713e+00</td>\n",
              "      <td>9.992014e-01</td>\n",
              "      <td>9.952742e-01</td>\n",
              "      <td>9.585956e-01</td>\n",
              "      <td>9.153160e-01</td>\n",
              "      <td>8.762529e-01</td>\n",
              "      <td>8.493371e-01</td>\n",
              "      <td>8.381762e-01</td>\n",
              "      <td>8.140405e-01</td>\n",
              "      <td>7.709250e-01</td>\n",
              "      <td>7.345240e-01</td>\n",
              "      <td>7.257016e-01</td>\n",
              "      <td>6.244603e-01</td>\n",
              "      <td>6.056471e-01</td>\n",
              "      <td>5.212781e-01</td>\n",
              "      <td>4.822270e-01</td>\n",
              "      <td>4.036325e-01</td>\n",
              "      <td>3.300833e-01</td>\n",
              "      <td>250.120109</td>\n",
              "      <td>0.041527</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>-5.640751e+01</td>\n",
              "      <td>-7.271573e+01</td>\n",
              "      <td>-4.832559e+01</td>\n",
              "      <td>-5.683171e+00</td>\n",
              "      <td>-1.137433e+02</td>\n",
              "      <td>-2.616051e+01</td>\n",
              "      <td>-4.355724e+01</td>\n",
              "      <td>-7.321672e+01</td>\n",
              "      <td>-1.343407e+01</td>\n",
              "      <td>-2.458826e+01</td>\n",
              "      <td>-4.797473e+00</td>\n",
              "      <td>-1.868371e+01</td>\n",
              "      <td>-5.791881e+00</td>\n",
              "      <td>-1.921433e+01</td>\n",
              "      <td>-4.498945e+00</td>\n",
              "      <td>-1.412985e+01</td>\n",
              "      <td>-2.516280e+01</td>\n",
              "      <td>-9.498746e+00</td>\n",
              "      <td>-7.213527e+00</td>\n",
              "      <td>-5.449772e+01</td>\n",
              "      <td>-3.483038e+01</td>\n",
              "      <td>-1.093314e+01</td>\n",
              "      <td>-4.480774e+01</td>\n",
              "      <td>-2.836627e+00</td>\n",
              "      <td>-1.029540e+01</td>\n",
              "      <td>-2.604551e+00</td>\n",
              "      <td>-2.256568e+01</td>\n",
              "      <td>-1.543008e+01</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>54201.500000</td>\n",
              "      <td>-9.203734e-01</td>\n",
              "      <td>-5.985499e-01</td>\n",
              "      <td>-8.903648e-01</td>\n",
              "      <td>-8.486401e-01</td>\n",
              "      <td>-6.915971e-01</td>\n",
              "      <td>-7.682956e-01</td>\n",
              "      <td>-5.540759e-01</td>\n",
              "      <td>-2.086297e-01</td>\n",
              "      <td>-6.430976e-01</td>\n",
              "      <td>-5.354257e-01</td>\n",
              "      <td>-7.624942e-01</td>\n",
              "      <td>-4.055715e-01</td>\n",
              "      <td>-6.485393e-01</td>\n",
              "      <td>-4.255740e-01</td>\n",
              "      <td>-5.828843e-01</td>\n",
              "      <td>-4.680368e-01</td>\n",
              "      <td>-4.837483e-01</td>\n",
              "      <td>-4.988498e-01</td>\n",
              "      <td>-4.562989e-01</td>\n",
              "      <td>-2.117214e-01</td>\n",
              "      <td>-2.283949e-01</td>\n",
              "      <td>-5.423504e-01</td>\n",
              "      <td>-1.618463e-01</td>\n",
              "      <td>-3.545861e-01</td>\n",
              "      <td>-3.171451e-01</td>\n",
              "      <td>-3.269839e-01</td>\n",
              "      <td>-7.083953e-02</td>\n",
              "      <td>-5.295979e-02</td>\n",
              "      <td>5.600000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>84692.000000</td>\n",
              "      <td>1.810880e-02</td>\n",
              "      <td>6.548556e-02</td>\n",
              "      <td>1.798463e-01</td>\n",
              "      <td>-1.984653e-02</td>\n",
              "      <td>-5.433583e-02</td>\n",
              "      <td>-2.741871e-01</td>\n",
              "      <td>4.010308e-02</td>\n",
              "      <td>2.235804e-02</td>\n",
              "      <td>-5.142873e-02</td>\n",
              "      <td>-9.291738e-02</td>\n",
              "      <td>-3.275735e-02</td>\n",
              "      <td>1.400326e-01</td>\n",
              "      <td>-1.356806e-02</td>\n",
              "      <td>5.060132e-02</td>\n",
              "      <td>4.807155e-02</td>\n",
              "      <td>6.641332e-02</td>\n",
              "      <td>-6.567575e-02</td>\n",
              "      <td>-3.636312e-03</td>\n",
              "      <td>3.734823e-03</td>\n",
              "      <td>-6.248109e-02</td>\n",
              "      <td>-2.945017e-02</td>\n",
              "      <td>6.781943e-03</td>\n",
              "      <td>-1.119293e-02</td>\n",
              "      <td>4.097606e-02</td>\n",
              "      <td>1.659350e-02</td>\n",
              "      <td>-5.213911e-02</td>\n",
              "      <td>1.342146e-03</td>\n",
              "      <td>1.124383e-02</td>\n",
              "      <td>22.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>139320.500000</td>\n",
              "      <td>1.315642e+00</td>\n",
              "      <td>8.037239e-01</td>\n",
              "      <td>1.027196e+00</td>\n",
              "      <td>7.433413e-01</td>\n",
              "      <td>6.119264e-01</td>\n",
              "      <td>3.985649e-01</td>\n",
              "      <td>5.704361e-01</td>\n",
              "      <td>3.273459e-01</td>\n",
              "      <td>5.971390e-01</td>\n",
              "      <td>4.539234e-01</td>\n",
              "      <td>7.395934e-01</td>\n",
              "      <td>6.182380e-01</td>\n",
              "      <td>6.625050e-01</td>\n",
              "      <td>4.931498e-01</td>\n",
              "      <td>6.488208e-01</td>\n",
              "      <td>5.232963e-01</td>\n",
              "      <td>3.996750e-01</td>\n",
              "      <td>5.008067e-01</td>\n",
              "      <td>4.589494e-01</td>\n",
              "      <td>1.330408e-01</td>\n",
              "      <td>1.863772e-01</td>\n",
              "      <td>5.285536e-01</td>\n",
              "      <td>1.476421e-01</td>\n",
              "      <td>4.395266e-01</td>\n",
              "      <td>3.507156e-01</td>\n",
              "      <td>2.409522e-01</td>\n",
              "      <td>9.104512e-02</td>\n",
              "      <td>7.827995e-02</td>\n",
              "      <td>77.165000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>172792.000000</td>\n",
              "      <td>2.454930e+00</td>\n",
              "      <td>2.205773e+01</td>\n",
              "      <td>9.382558e+00</td>\n",
              "      <td>1.687534e+01</td>\n",
              "      <td>3.480167e+01</td>\n",
              "      <td>7.330163e+01</td>\n",
              "      <td>1.205895e+02</td>\n",
              "      <td>2.000721e+01</td>\n",
              "      <td>1.559499e+01</td>\n",
              "      <td>2.374514e+01</td>\n",
              "      <td>1.201891e+01</td>\n",
              "      <td>7.848392e+00</td>\n",
              "      <td>7.126883e+00</td>\n",
              "      <td>1.052677e+01</td>\n",
              "      <td>8.877742e+00</td>\n",
              "      <td>1.731511e+01</td>\n",
              "      <td>9.253526e+00</td>\n",
              "      <td>5.041069e+00</td>\n",
              "      <td>5.591971e+00</td>\n",
              "      <td>3.942090e+01</td>\n",
              "      <td>2.720284e+01</td>\n",
              "      <td>1.050309e+01</td>\n",
              "      <td>2.252841e+01</td>\n",
              "      <td>4.584549e+00</td>\n",
              "      <td>7.519589e+00</td>\n",
              "      <td>3.517346e+00</td>\n",
              "      <td>3.161220e+01</td>\n",
              "      <td>3.384781e+01</td>\n",
              "      <td>25691.160000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                Time            V1  ...         Amount          Class\n",
              "count  284807.000000  2.848070e+05  ...  284807.000000  284807.000000\n",
              "mean    94813.859575  3.919560e-15  ...      88.349619       0.001727\n",
              "std     47488.145955  1.958696e+00  ...     250.120109       0.041527\n",
              "min         0.000000 -5.640751e+01  ...       0.000000       0.000000\n",
              "25%     54201.500000 -9.203734e-01  ...       5.600000       0.000000\n",
              "50%     84692.000000  1.810880e-02  ...      22.000000       0.000000\n",
              "75%    139320.500000  1.315642e+00  ...      77.165000       0.000000\n",
              "max    172792.000000  2.454930e+00  ...   25691.160000       1.000000\n",
              "\n",
              "[8 rows x 31 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xFPzcfFeU2bU"
      },
      "source": [
        "## Valores Ausentes\n",
        "Para testar a qualidade dos dataset verifiquei, então, que a **base de dados não possui nenhum valor nulo**. Para chegar a essa conclusão ordenei a quantidade de entradas nulas por feature de forma descrescente e o maior valor retornado foi zero, não precisando, desse modo, de uma etapa de limpeza dos dados."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "t9CGK29K82I-",
        "outputId": "be972bb8-95b7-47f4-81d9-d20635a310f9"
      },
      "source": [
        "#verificar se há valores ausentes\n",
        "df.isnull().sum().sort_values(ascending=False)[:8]"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Class    0\n",
              "V14      0\n",
              "V1       0\n",
              "V2       0\n",
              "V3       0\n",
              "V4       0\n",
              "V5       0\n",
              "V6       0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CkQTlzjsUQaN"
      },
      "source": [
        "## Balanceamento dos Dados\n",
        "\n",
        "Depois analisei o balanceamento dos dados e verifiquei que **mais** de **99%** da base de dados é representada por **transações** consideradas **normais**. As **transações fraudelentas**, por sua vez, representam apenas **0.17%**. \n",
        "\n",
        "Para tornar a **discrepância** mais visual plotei um **gráfico** de **Distribuição das Classes** para evidenciar a dominância das transações normais representadas pela barra azul sobre as transações fraudulentas, barra laranja. Como os dados estão desbalanceados será **necessária** uma etapa de **balanceamento** de modo a otimizar o desempenho do modelo."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 482
        },
        "id": "44-KYkTp_aF2",
        "outputId": "1e006569-f3f5-49b2-c174-7f77a1970a1c"
      },
      "source": [
        "#verificar balanceamento dos dados\n",
        "print(\"Número de transações da classe:\\t\")\n",
        "print(df.Class.value_counts())\n",
        "\n",
        "#verificar percentual de transações corresponde a cada classe\n",
        "print('\\n\\nPercentual de transações normais:\\t',df[df.Class==0].shape[0]/df.shape[0] * 100)\n",
        "print('Percentual de transações fraudulentas:\\t',df[df.Class==1].shape[0]/df.shape[0] * 100)\n",
        "print('\\n')\n",
        "\n",
        "# plotar gráfico de barras para as Classes\n",
        "fig, ax = plt.subplots()\n",
        "sns.countplot(x='Class', data=df,ax=ax)\n",
        "ax.set_title('Distribuição das Classes')\n",
        "plt.plot()  "
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Número de transações da classe:\t\n",
            "0    284315\n",
            "1       492\n",
            "Name: Class, dtype: int64\n",
            "\n",
            "\n",
            "Percentual de transações normais:\t 99.82725143693798\n",
            "Percentual de transações fraudulentas:\t 0.1727485630620034\n",
            "\n",
            "\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[]"
            ]
          },
          "metadata": {},
          "execution_count": 6
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zEHgUrtVUKFy"
      },
      "source": [
        "## Distribuição das Variáveis\n",
        "\n",
        "Para analisar a distribuição das duas classes de transações, iniciei plotando o histograma da variável `Time`, mas não consegui extrair nenhuma informação a partir da distribuições das frequências."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 441
        },
        "id": "GyUtecFcQdx0",
        "outputId": "7eca79fa-0c02-4963-c637-19c41e26cb1d"
      },
      "source": [
        "#plotar histogramas da Variável `Time`\n",
        "fig,ax=plt.subplots(nrows=2,ncols=1,figsize=(12,6))\n",
        "\n",
        "num_bins=40\n",
        "\n",
        "ax[0].hist(df.Time[df.Class==0],bins=40)\n",
        "ax[0].set_title('Transações Normais')\n",
        "\n",
        "ax[1].hist(df.Time[df.Class==1],bins=40)\n",
        "ax[1].set_title('Transações Fraudulentas')\n",
        "\n",
        "plt.xlabel('Tempo (seg)')\n",
        "plt.ylabel('Transações')\n",
        "plt.tight_layout()"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x432 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dl-Iwn8GVywg"
      },
      "source": [
        "Em seguida, plotei o histograma da variável `Amount` e pelos gráficos foi possível indentificar indícios da presença de outliers e que as distribuições têm comportamentos diferentes para os dois tipos de transação."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 421
        },
        "id": "BMTOEfTAgY5k",
        "outputId": "65397846-0227-4ecb-c646-17558f10b25a"
      },
      "source": [
        "#histograma para a variável `Amount`\n",
        "fig,ax=plt.subplots(nrows=2,ncols=1,figsize=(12,6))\n",
        "\n",
        "ax[0].hist(df.Amount[df.Class==0],bins=15)\n",
        "ax[0].set_title('Transações Normais')\n",
        "\n",
        "ax[1].hist(df.Amount[df.Class==1],bins=15)\n",
        "ax[1].set_title('Transações Fraudulentas')\n",
        "\n",
        "plt.xlabel('Amount')\n",
        "plt.ylabel('Transações')\n",
        "plt.plot()"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[]"
            ]
          },
          "metadata": {},
          "execution_count": 8
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x432 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3wmSCo-1MH1e"
      },
      "source": [
        "Para analisar a variação dos dados de forma mais visual plotei um Diagrama de Caixa da variável `Amount`e foi possível confirmar as distribuições diferentes das duas classes e a presença de outliers. Isso, provavelmente, irá contribuir para o treinamento do modelo de *machine learning*."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 585
        },
        "id": "eJdVsz72SzCx",
        "outputId": "1706ef0e-86e0-44f1-fd62-2a89d472d1a3"
      },
      "source": [
        "#plotar boxplot para Amount\n",
        "fig, ax = plt.subplots(figsize=(6,8), sharex=True)\n",
        "\n",
        "sns.boxplot(x=df.Class, y=df.Amount, showmeans=True, ax=ax)\n",
        "plt.ylim((-20, 400))\n",
        "plt.xticks([0, 1], ['Normal', 'Fraude'])\n",
        "\n",
        "plt.tight_layout()"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x576 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "C10KymMcfyqj"
      },
      "source": [
        "Após analisar as distribuições, plotei um Mapa de Calor para verificar a correlação das variáveis, mas não consegui extrair nenhuma informação válida."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 419
        },
        "id": "IxWjk1bQax0s",
        "outputId": "7cd32e30-8b1a-44cf-f19e-19fa3f1bafed"
      },
      "source": [
        "#plotar heatmap\n",
        "corr=df.corr()\n",
        "\n",
        "fig, ax = plt.subplots(figsize = (8,6))\n",
        "\n",
        "sns.heatmap(corr, xticklabels=corr.columns, yticklabels=corr.columns,\n",
        "            linewidths=.1, cmap=\"coolwarm\",ax=ax)\n",
        "ax.set_title('Matriz de Correlação')\n",
        "plt.show()"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 576x432 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3XmuZ7ThRv8o"
      },
      "source": [
        "Resumindo, algumas conclusões que foram extraídas dessa etapa exploratória foram:\n",
        "* O dataset está muito desbalanceado, uma vez que as transações fraudulentas representam apenas 0.17% das entradas\n",
        "* Não há dados nulos ou ausentes no dataframe\n",
        "* Pela distribuição estatística e boxplot foi possível confirmar a presença de outliers na variável `Amount` \n",
        "* Não foi identificada nenhuma correlação válida a ser explorada nos dados desbalanceados\n",
        "* Como as variáveis passaram por um processo de PCA, assumi que já passaram por um processo de padronização\n",
        "* As variáveis `Time` e `Amount` não estão padronizadas\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ULe7z0jZt0EH"
      },
      "source": [
        "## Preparação dos Dados\n",
        "A partir das conclusões da etapa exploratória, resolvi observar os seguintes tópicos para preparar os dados:\n",
        "* Normalizar os dados que não foram pré-processados (variáveis `Time` e `Amount`)\n",
        "* Dividir o conjunto de dados entre treino e teste\n",
        "* Balancear o conjunto de dados"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EKf3DEohYrrB"
      },
      "source": [
        "#### Padronizar as variáveis `Time` e `Amount`\n",
        "Como a variável `Amount` possui outliers, utilizei a classe `StandardScaler` para realizar a padronização."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 224
        },
        "id": "ZpvLyPRSYyZp",
        "outputId": "8b24056f-2a54-44b5-ffab-7f21042d7247"
      },
      "source": [
        "#padronizar as variáveis time e amount\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "df_clean=df.copy()\n",
        "\n",
        "scaler=StandardScaler()\n",
        "df_clean['std_amount']=scaler.fit_transform(df_clean.Amount.values.reshape(-1,1))\n",
        "df_clean['std_time']=scaler.fit_transform(df_clean.Time.values.reshape(-1,1))\n",
        "\n",
        "df_clean.drop(['Time','Amount'],inplace=True,axis=1)\n",
        "\n",
        "#ver as primeiras entradas\n",
        "df_clean.head()\n"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>V1</th>\n",
              "      <th>V2</th>\n",
              "      <th>V3</th>\n",
              "      <th>V4</th>\n",
              "      <th>V5</th>\n",
              "      <th>V6</th>\n",
              "      <th>V7</th>\n",
              "      <th>V8</th>\n",
              "      <th>V9</th>\n",
              "      <th>V10</th>\n",
              "      <th>V11</th>\n",
              "      <th>V12</th>\n",
              "      <th>V13</th>\n",
              "      <th>V14</th>\n",
              "      <th>V15</th>\n",
              "      <th>V16</th>\n",
              "      <th>V17</th>\n",
              "      <th>V18</th>\n",
              "      <th>V19</th>\n",
              "      <th>V20</th>\n",
              "      <th>V21</th>\n",
              "      <th>V22</th>\n",
              "      <th>V23</th>\n",
              "      <th>V24</th>\n",
              "      <th>V25</th>\n",
              "      <th>V26</th>\n",
              "      <th>V27</th>\n",
              "      <th>V28</th>\n",
              "      <th>Class</th>\n",
              "      <th>std_amount</th>\n",
              "      <th>std_time</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>-1.359807</td>\n",
              "      <td>-0.072781</td>\n",
              "      <td>2.536347</td>\n",
              "      <td>1.378155</td>\n",
              "      <td>-0.338321</td>\n",
              "      <td>0.462388</td>\n",
              "      <td>0.239599</td>\n",
              "      <td>0.098698</td>\n",
              "      <td>0.363787</td>\n",
              "      <td>0.090794</td>\n",
              "      <td>-0.551600</td>\n",
              "      <td>-0.617801</td>\n",
              "      <td>-0.991390</td>\n",
              "      <td>-0.311169</td>\n",
              "      <td>1.468177</td>\n",
              "      <td>-0.470401</td>\n",
              "      <td>0.207971</td>\n",
              "      <td>0.025791</td>\n",
              "      <td>0.403993</td>\n",
              "      <td>0.251412</td>\n",
              "      <td>-0.018307</td>\n",
              "      <td>0.277838</td>\n",
              "      <td>-0.110474</td>\n",
              "      <td>0.066928</td>\n",
              "      <td>0.128539</td>\n",
              "      <td>-0.189115</td>\n",
              "      <td>0.133558</td>\n",
              "      <td>-0.021053</td>\n",
              "      <td>0</td>\n",
              "      <td>0.244964</td>\n",
              "      <td>-1.996583</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.191857</td>\n",
              "      <td>0.266151</td>\n",
              "      <td>0.166480</td>\n",
              "      <td>0.448154</td>\n",
              "      <td>0.060018</td>\n",
              "      <td>-0.082361</td>\n",
              "      <td>-0.078803</td>\n",
              "      <td>0.085102</td>\n",
              "      <td>-0.255425</td>\n",
              "      <td>-0.166974</td>\n",
              "      <td>1.612727</td>\n",
              "      <td>1.065235</td>\n",
              "      <td>0.489095</td>\n",
              "      <td>-0.143772</td>\n",
              "      <td>0.635558</td>\n",
              "      <td>0.463917</td>\n",
              "      <td>-0.114805</td>\n",
              "      <td>-0.183361</td>\n",
              "      <td>-0.145783</td>\n",
              "      <td>-0.069083</td>\n",
              "      <td>-0.225775</td>\n",
              "      <td>-0.638672</td>\n",
              "      <td>0.101288</td>\n",
              "      <td>-0.339846</td>\n",
              "      <td>0.167170</td>\n",
              "      <td>0.125895</td>\n",
              "      <td>-0.008983</td>\n",
              "      <td>0.014724</td>\n",
              "      <td>0</td>\n",
              "      <td>-0.342475</td>\n",
              "      <td>-1.996583</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-1.358354</td>\n",
              "      <td>-1.340163</td>\n",
              "      <td>1.773209</td>\n",
              "      <td>0.379780</td>\n",
              "      <td>-0.503198</td>\n",
              "      <td>1.800499</td>\n",
              "      <td>0.791461</td>\n",
              "      <td>0.247676</td>\n",
              "      <td>-1.514654</td>\n",
              "      <td>0.207643</td>\n",
              "      <td>0.624501</td>\n",
              "      <td>0.066084</td>\n",
              "      <td>0.717293</td>\n",
              "      <td>-0.165946</td>\n",
              "      <td>2.345865</td>\n",
              "      <td>-2.890083</td>\n",
              "      <td>1.109969</td>\n",
              "      <td>-0.121359</td>\n",
              "      <td>-2.261857</td>\n",
              "      <td>0.524980</td>\n",
              "      <td>0.247998</td>\n",
              "      <td>0.771679</td>\n",
              "      <td>0.909412</td>\n",
              "      <td>-0.689281</td>\n",
              "      <td>-0.327642</td>\n",
              "      <td>-0.139097</td>\n",
              "      <td>-0.055353</td>\n",
              "      <td>-0.059752</td>\n",
              "      <td>0</td>\n",
              "      <td>1.160686</td>\n",
              "      <td>-1.996562</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>-0.966272</td>\n",
              "      <td>-0.185226</td>\n",
              "      <td>1.792993</td>\n",
              "      <td>-0.863291</td>\n",
              "      <td>-0.010309</td>\n",
              "      <td>1.247203</td>\n",
              "      <td>0.237609</td>\n",
              "      <td>0.377436</td>\n",
              "      <td>-1.387024</td>\n",
              "      <td>-0.054952</td>\n",
              "      <td>-0.226487</td>\n",
              "      <td>0.178228</td>\n",
              "      <td>0.507757</td>\n",
              "      <td>-0.287924</td>\n",
              "      <td>-0.631418</td>\n",
              "      <td>-1.059647</td>\n",
              "      <td>-0.684093</td>\n",
              "      <td>1.965775</td>\n",
              "      <td>-1.232622</td>\n",
              "      <td>-0.208038</td>\n",
              "      <td>-0.108300</td>\n",
              "      <td>0.005274</td>\n",
              "      <td>-0.190321</td>\n",
              "      <td>-1.175575</td>\n",
              "      <td>0.647376</td>\n",
              "      <td>-0.221929</td>\n",
              "      <td>0.062723</td>\n",
              "      <td>0.061458</td>\n",
              "      <td>0</td>\n",
              "      <td>0.140534</td>\n",
              "      <td>-1.996562</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>-1.158233</td>\n",
              "      <td>0.877737</td>\n",
              "      <td>1.548718</td>\n",
              "      <td>0.403034</td>\n",
              "      <td>-0.407193</td>\n",
              "      <td>0.095921</td>\n",
              "      <td>0.592941</td>\n",
              "      <td>-0.270533</td>\n",
              "      <td>0.817739</td>\n",
              "      <td>0.753074</td>\n",
              "      <td>-0.822843</td>\n",
              "      <td>0.538196</td>\n",
              "      <td>1.345852</td>\n",
              "      <td>-1.119670</td>\n",
              "      <td>0.175121</td>\n",
              "      <td>-0.451449</td>\n",
              "      <td>-0.237033</td>\n",
              "      <td>-0.038195</td>\n",
              "      <td>0.803487</td>\n",
              "      <td>0.408542</td>\n",
              "      <td>-0.009431</td>\n",
              "      <td>0.798278</td>\n",
              "      <td>-0.137458</td>\n",
              "      <td>0.141267</td>\n",
              "      <td>-0.206010</td>\n",
              "      <td>0.502292</td>\n",
              "      <td>0.219422</td>\n",
              "      <td>0.215153</td>\n",
              "      <td>0</td>\n",
              "      <td>-0.073403</td>\n",
              "      <td>-1.996541</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "         V1        V2        V3  ...  Class  std_amount  std_time\n",
              "0 -1.359807 -0.072781  2.536347  ...      0    0.244964 -1.996583\n",
              "1  1.191857  0.266151  0.166480  ...      0   -0.342475 -1.996583\n",
              "2 -1.358354 -1.340163  1.773209  ...      0    1.160686 -1.996562\n",
              "3 -0.966272 -0.185226  1.792993  ...      0    0.140534 -1.996562\n",
              "4 -1.158233  0.877737  1.548718  ...      0   -0.073403 -1.996541\n",
              "\n",
              "[5 rows x 31 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nX6TctyqgLxJ"
      },
      "source": [
        "#### Dividir base de dados entre treino e teste\n",
        "\n",
        "Antes de balancear os dados é importante dividir a base de dados entre treino e teste para, posteriormente, conferir se o balanceamento foi correto.\n",
        "\n",
        "Para garantir que os dados de treino e teste possuam a mesma proporção das classes utilizei `stratify`."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dnNtxpR6gDFn"
      },
      "source": [
        "#separar variáveis X e y\n",
        "X= df_clean.drop('Class',axis=1)\n",
        "y=df_clean.Class\n",
        "\n",
        "#dividir dados entre treino e teste\n",
        "from sklearn.model_selection import train_test_split\n",
        "X_train,X_test,y_train,y_test=train_test_split(X,y,stratify=y,shuffle=True)"
      ],
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EK95QIN-kvxI"
      },
      "source": [
        "#### Balanceamento dos Dados\n",
        "Para balancear os dados escolhi a técnica de undersampling que retira aleatoriamente algumas observações da classe majoritária, preservando a classe minoritária."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 438
        },
        "id": "JSVkY0MKkyni",
        "outputId": "4439feae-19d0-4778-ea5f-ecb0ac5d9da7"
      },
      "source": [
        "#importar os pacotes necessários\n",
        "from imblearn.under_sampling import RandomUnderSampler\n",
        "\n",
        "#aplicar técnica de undersampling\n",
        "rus=RandomUnderSampler()\n",
        "X_rus,y_rus = rus.fit_sample(X_train,y_train)\n",
        "\n",
        "#verificar balanceamento das classes\n",
        "print(pd.Series(y_rus).value_counts())\n",
        "\n",
        "#plotar a nova distribuição de classes\n",
        "sns.countplot(x=y_rus);"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/externals/six.py:31: FutureWarning: The module is deprecated in version 0.21 and will be removed in version 0.23 since we've dropped support for Python 2.7. Please rely on the official version of six (https://pypi.org/project/six/).\n",
            "  \"(https://pypi.org/project/six/).\", FutureWarning)\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:144: FutureWarning: The sklearn.neighbors.base module is  deprecated in version 0.22 and will be removed in version 0.24. The corresponding classes / functions should instead be imported from sklearn.neighbors. Anything that cannot be imported from sklearn.neighbors is now part of the private API.\n",
            "  warnings.warn(message, FutureWarning)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1    369\n",
            "0    369\n",
            "dtype: int64\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function safe_indexing is deprecated; safe_indexing is deprecated in version 0.22 and will be removed in version 0.24.\n",
            "  warnings.warn(msg, category=FutureWarning)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Euccyc0sv6mU"
      },
      "source": [
        "Pelo gráfico podemos ver que as classes estão balanceadas e agora podemos testar novamente se há alguma correlação válida no dataset."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 439
        },
        "id": "qzjWh5kEwVO5",
        "outputId": "40abac63-5c84-47ba-8aac-1bdd60be83cf"
      },
      "source": [
        "# plotar a matriz de correlação\n",
        "corr = X_train.corr()\n",
        "corr_rus = pd.DataFrame(X_rus).corr()\n",
        "\n",
        "\n",
        "fig, ax = plt.subplots(figsize = (8,6))\n",
        "\n",
        "sns.heatmap(corr_rus, xticklabels=corr.columns, yticklabels=corr.columns,\n",
        "            linewidths=.1, cmap=\"coolwarm\", ax=ax)\n",
        "ax.set_title('Mapa de Calor Dados Balanceados')\n",
        "\n",
        "plt.show()"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 576x432 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LrTr9dx5BIZm"
      },
      "source": [
        "Com a base de dados balanceada é possível ver que agora há várias correlações fortes que não existiam quando os dados estavam desbalanceados."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wJNH5qcjRxfX"
      },
      "source": [
        "## Modelo de Machine Learning\n",
        "\n",
        "Agora que os dados já estão padronizados e balanceados, comecei a desenvolver um modelo de classificação utilizando o método de Regressão Logística."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lDySx8XUSMw_"
      },
      "source": [
        "#importar pacotes necessários\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "\n",
        "#instanciar o modelo\n",
        "model=LogisticRegression()\n",
        "\n",
        "#treinar o modelo\n",
        "model.fit(X_rus,y_rus)\n",
        "\n",
        "#fazer previsões\n",
        "y_prev=model.predict(X_test)\n",
        "y_proba=model.predict_proba(X_test)"
      ],
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Wljo7PsSFPiA"
      },
      "source": [
        "Em seguida, com o modelo já treinado e as previsões realizadas, testei o seu desempenho para avaliar se o modelo é satisfatório."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3e4ENOTYSUXi"
      },
      "source": [
        "## Avaliar o desempenho do modelo\n",
        "\n",
        "Primeiro, extrai o relatório de classificação do modelo para avaliar algumas métricas. Em seguida plotei a matriz de confusão para verificar de forma mais visual o percentual de erros e acertos do modelo.\n",
        "\n",
        "Algumas questões importantes que devem ser levadas em consideração:\n",
        "* A acurácia não é uma métrica apropriada para avaliar o desempenho do modelo pois originalmente os dados estavam desbalanceados.\n",
        "* A área sob a curva é uma métrica importante que auxilia na comparação de diversos classificadores, no nosso caso temos um AUC de 92%. Percentual satisfatório pois quanto maior o AUC melhor o modelo está em distinguir entre transações fraudulentas e normais.\n",
        "* Obsevando a matriz de confusão ou recall do relatório de classificação podemos ver que o modelo teve uma taxa de 87% de acerto para transações fraudulentas.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "H1jEi7gkSe2r",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 516
        },
        "outputId": "36e2e3b4-0e00-4172-e3a5-0304e967bbbe"
      },
      "source": [
        "#plotar matriz de confusão\n",
        "from sklearn.metrics import confusion_matrix\n",
        "import scikitplot as skplt\n",
        "\n",
        "skplt.metrics.plot_confusion_matrix(y_test,y_prev,normalize=True)\n",
        "\n",
        "#relatório de classificação\n",
        "from sklearn.metrics import classification_report\n",
        "print('\\t\\t Relatório de Classificação\\n\\n',classification_report(y_test,y_prev))\n",
        "\n",
        "#calcular acurácia do modelo\n",
        "from sklearn.metrics import accuracy_score\n",
        "print('Acurácia:\\t\\t',accuracy_score(y_test,y_prev))\n",
        "\n",
        "#calcular área sob a curva\n",
        "from sklearn.metrics import roc_auc_score\n",
        "print('Área sob a curva:\\t',roc_auc_score(y_test,y_prev))"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\t\t Relatório de Classificação\n",
            "\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      0.97      0.99     71079\n",
            "           1       0.05      0.87      0.09       123\n",
            "\n",
            "    accuracy                           0.97     71202\n",
            "   macro avg       0.52      0.92      0.54     71202\n",
            "weighted avg       1.00      0.97      0.98     71202\n",
            "\n",
            "Acurácia:\t\t 0.9705064464481334\n",
            "Área sob a curva:\t 0.9202996048024887\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0Bj7zRZMSfO7"
      },
      "source": [
        "## Conclusão\n",
        "\n",
        "* Analisando o modelo sob a perspectiva dos bancos o tipo de erro mais prejudicial seriam os Falsos Negativos, isto é, quando uma transação fraudulenta é classificada como normal erroneamente. O modelo deve encontrar de qualquer forma todas as transações fraudulentas mesmo que classifique algumas transações normais como fraudulentas no processo. Com isso em mente, a melhor métrica para se avaliar o modelo seria então o Recall que deve ser alto pois classificar transações fraudulentas como normais acarretam em danos financeiros e perda de credibilidade.\n",
        "* A precisão do modelo para a classe de transações fraudulentas apesar de baixa não engloba o 'pior erro' e, portanto, não é a melhor métrica para se analisar o algoritmo pois os Falsos Negativos são mais prejudicias do que os Falsos Positivos."
      ]
    }
  ]
}